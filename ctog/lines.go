package ctog

import (
	"strings"

	"github.com/invopop/gobl/bill"
	"github.com/invopop/gobl/cbc"
	"github.com/invopop/gobl/l10n"
	"github.com/invopop/gobl/num"
	"github.com/invopop/gobl/org"
	"github.com/invopop/gobl/tax"
)

func (c *Conversor) getLines(transaction *SupplyChainTradeTransaction) error {
	items := transaction.IncludedSupplyChainTradeLineItem
	lines := make([]*bill.Line, 0, len(items))

	for _, item := range items {
		price, err := num.AmountFromString(item.SpecifiedLineTradeAgreement.NetPriceProductTradePrice.ChargeAmount)
		if err != nil {
			return err
		}
		line := &bill.Line{
			// Index is generated by GOBL
			//If Quantity is not present, assume 1
			Quantity: num.MakeAmount(1, 0),
			Item: &org.Item{
				Name:  item.SpecifiedTradeProduct.Name,
				Price: price,
			},
			Taxes: tax.Set{
				{
					Rate:     FindTaxKey(item.SpecifiedLineTradeSettlement.ApplicableTradeTax.CategoryCode),
					Category: cbc.Code(item.SpecifiedLineTradeSettlement.ApplicableTradeTax.TypeCode),
				},
			},
		}

		if item.SpecifiedLineTradeDelivery != nil {
			line.Quantity, _ = num.AmountFromString(item.SpecifiedLineTradeDelivery.BilledQuantity.Value)
		}

		if item.SpecifiedLineTradeDelivery.BilledQuantity.UnitCode != "" {
			line.Item.Unit = UnitFromUNECE(cbc.Code(item.SpecifiedLineTradeDelivery.BilledQuantity.UnitCode))
		}

		if item.SpecifiedTradeProduct.SellerAssignedID != nil {
			line.Item.Ref = *item.SpecifiedTradeProduct.SellerAssignedID
		}
		if item.SpecifiedTradeProduct.BuyerAssignedID != nil {
			if line.Item.Identities == nil {
				line.Item.Identities = make([]*org.Identity, 0)
			}
			line.Item.Identities = append(line.Item.Identities, &org.Identity{
				Code: cbc.Code(*item.SpecifiedTradeProduct.BuyerAssignedID),
			})
		}

		if item.SpecifiedTradeProduct.GlobalID != nil {
			if line.Item.Identities == nil {
				line.Item.Identities = make([]*org.Identity, 0)
			}
			line.Item.Identities = append(line.Item.Identities, &org.Identity{
				// This label corresponds to a code from the ISO 6523 ICD List. Mapping is not yet supported
				Label: item.SpecifiedTradeProduct.GlobalID.SchemeID,
				Code:  cbc.Code(item.SpecifiedTradeProduct.GlobalID.Value),
			})
		}

		if item.SpecifiedTradeProduct.Description != nil {
			line.Item.Description = *item.SpecifiedTradeProduct.Description
		}

		if item.SpecifiedTradeProduct.OriginTradeCountry != nil {
			line.Item.Origin = l10n.ISOCountryCode(item.SpecifiedTradeProduct.OriginTradeCountry.ID)
		}

		if len(item.AssociatedDocumentLineDocument.IncludedNote) > 0 {
			line.Notes = make([]*cbc.Note, 0, len(item.AssociatedDocumentLineDocument.IncludedNote))
			for _, note := range item.AssociatedDocumentLineDocument.IncludedNote {
				n := &cbc.Note{}
				if note.Content != "" {
					n.Text = note.Content
				}
				if note.ContentCode != "" {
					n.Code = note.ContentCode
				}
				line.Notes = append(line.Notes, n)
			}
		}

		if item.SpecifiedLineTradeSettlement.ApplicableTradeTax.RateApplicablePercent != "" {
			if !strings.HasSuffix(item.SpecifiedLineTradeSettlement.ApplicableTradeTax.RateApplicablePercent, "%") {
				item.SpecifiedLineTradeSettlement.ApplicableTradeTax.RateApplicablePercent += "%"
			}
			percent, err := num.PercentageFromString(item.SpecifiedLineTradeSettlement.ApplicableTradeTax.RateApplicablePercent)
			if err != nil {
				return err
			}
			line.Taxes[0].Percent = &percent
		}

		if item.SpecifiedLineTradeSettlement.SpecifiedTradeAllowanceCharge != nil {
			line, err = parseLineCharges(item.SpecifiedLineTradeSettlement.SpecifiedTradeAllowanceCharge, line)
			if err != nil {
				return err
			}
		}

		if item.SpecifiedLineTradeSettlement.ReceivableSpecifiedTradeAccountingAccount != nil {
			if line.Notes == nil {
				line.Notes = make([]*cbc.Note, 0)
			}
			line.Notes = append(line.Notes, &cbc.Note{
				Text: item.SpecifiedLineTradeSettlement.ReceivableSpecifiedTradeAccountingAccount.ID,
			})
			if item.SpecifiedLineTradeSettlement.ReceivableSpecifiedTradeAccountingAccount.TypeCode != nil {
				for i, note := range line.Notes {
					if note.Text == item.SpecifiedLineTradeSettlement.ReceivableSpecifiedTradeAccountingAccount.ID {
						line.Notes[i].Key = cbc.Key(*item.SpecifiedLineTradeSettlement.ReceivableSpecifiedTradeAccountingAccount.TypeCode)
						break
					}
				}
			}
		}

		if item.SpecifiedTradeProduct.DesignatedProductClassification != nil {
			for _, classification := range item.SpecifiedTradeProduct.DesignatedProductClassification {
				line.Item.Identities = append(line.Item.Identities, &org.Identity{
					Label: classification.ClassCode.ListID,
					Code:  cbc.Code(classification.ClassCode.Value),
				})
			}
		}

		lines = append(lines, line)
	}

	c.inv.Lines = lines
	return nil
}

// parseLineCharges parses inline charges and discounts from the CII document
func parseLineCharges(allowances []*SpecifiedTradeAllowanceCharge, line *bill.Line) (*bill.Line, error) {
	for _, allowanceCharge := range allowances {
		amount, err := num.AmountFromString(allowanceCharge.ActualAmount)
		if err != nil {
			return nil, err
		}
		if allowanceCharge.ChargeIndicator.Indicator {
			charge := &bill.LineCharge{
				Amount: amount,
			}
			if allowanceCharge.ReasonCode != nil {
				charge.Code = *allowanceCharge.ReasonCode
			}
			if allowanceCharge.Reason != nil {
				charge.Reason = *allowanceCharge.Reason
			}
			if allowanceCharge.CalculationPercent != nil {
				if !strings.HasSuffix(*allowanceCharge.CalculationPercent, "%") {
					*allowanceCharge.CalculationPercent += "%"
				}
				percent, err := num.PercentageFromString(*allowanceCharge.CalculationPercent)
				if err != nil {
					return nil, err
				}
				charge.Percent = &percent
			}
			if line.Charges == nil {
				line.Charges = make([]*bill.LineCharge, 0)
			}
			line.Charges = append(line.Charges, charge)
		} else {
			discount := &bill.LineDiscount{
				Amount: amount,
			}
			if allowanceCharge.ReasonCode != nil {
				discount.Code = *allowanceCharge.ReasonCode
			}
			if allowanceCharge.Reason != nil {
				discount.Reason = *allowanceCharge.Reason
			}
			if allowanceCharge.CalculationPercent != nil {
				if !strings.HasSuffix(*allowanceCharge.CalculationPercent, "%") {
					*allowanceCharge.CalculationPercent += "%"
				}
				percent, err := num.PercentageFromString(*allowanceCharge.CalculationPercent)
				if err != nil {
					return nil, err
				}
				discount.Percent = &percent
			}
			if line.Discounts == nil {
				line.Discounts = make([]*bill.LineDiscount, 0)
			}
			line.Discounts = append(line.Discounts, discount)
		}
	}
	return line, nil
}
